// Colors
$colors: (
  'dark': #333,
  'darker': #222,
  'light': #E0E0E0,
  'primary': #FFBE00
);

@each $name, $color in $colors {
  .b-#{unquote($name)} {
    border-color: $color !important;
  }

  .bg-#{$name} {
    background: $color;
  }

  .text-#{$name} {
    color: $color;
  }
}

// Sizing
$sizes: (
  0: 0,
  25: 25%,
  50: 50%,
  75: 75%,
  90: 90%,
  100: 100%
);

@each $prop, $abbrev in (width: w, height: h) {
  @each $size, $length in $sizes {
    .#{$abbrev}-#{$size} { #{$prop}: $length !important; }
  }
}

// Spacing
$spacer: 1rem !default;
$spacers: () !default;
$spacers: map-merge((
  0: 0,
  1: ($spacer * .25),
  2: ($spacer * .5),
  3: ($spacer),
  4: ($spacer * 1.5),
  5: ($spacer * 3)
), $spacers);

@function borderOrSpacing($abbrev) {
  @if $abbrev == 'b' {
    @return solid;
  }
  @else {
    @return !important;
  }
}

@each $prop, $abbrev in (margin: m, padding: p, border: b) {
  @each $size, $length in $spacers {
    .#{$abbrev}-#{$size} {
      #{$prop}: $length borderOrSpacing($abbrev);
    }

    .#{$abbrev}t-#{$size},
    .#{$abbrev}y-#{$size} {
      #{$prop}-top: $length borderOrSpacing($abbrev);
    }

    .#{$abbrev}r-#{$size},
    .#{$abbrev}x-#{$size} {
      #{$prop}-right: $length borderOrSpacing($abbrev);
    }

    .#{$abbrev}b-#{$size},
    .#{$abbrev}y-#{$size} {
      #{$prop}-bottom: $length borderOrSpacing($abbrev);
    }
    .#{$abbrev}l-#{$size},
    .#{$abbrev}x-#{$size} {
      #{$prop}-left: $length borderOrSpacing($abbrev);
    }
  }
}

$flex-positions: (
  'center',
  'flex-start',
  'flex-end',
  'space-around',
  'space-between',
  'stretch'
);

@each $flex-pos in $flex-positions {
  .justify-content--#{$flex-pos} {
    justify-content: unquote($flex-pos);
  }
  .align-items--#{$flex-pos} {
    align-items: unquote($flex-pos);
  }
  .align-content--#{$flex-pos} { // Only applicable with wrapping and multiple lines (rows) of items
    align-content: unquote($flex-pos);
  }
}

.flex {
  display: flex !important;

  &--center {
    justify-content: center;
    align-items: center;
  }

  &--col {
    flex-direction: column;
  }

  &--row {
    flex-direction: row;
  }

  &--wrap {
    flex-wrap: wrap;
  }

  @each $value in 0 5 10 15 20 25 30 33 40 50 60 75 100 {
    &--basis-#{$value} {
      $valuePr: $value + '%';
      max-width: unquote($valuePr) !important;
      flex-basis: unquote($valuePr) !important;
      flex-grow: 0;
    }
  }

  @each $value in 0 1 2 3 4 5 {
    &--shrink-#{$value} {
      flex-shrink: $value !important;
    }

    &--grow-#{$value} {
      flex-grow: $value !important;
      max-width: initial;
      max-width: auto;
    }
  }
}

